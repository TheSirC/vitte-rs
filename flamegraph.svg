<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA[var details, searchbtn, matchedtxt, svg;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}
// mouse-over for info
function s(node) {		// show
    info = g_to_text(node);
    details.nodeValue = nametype + " " + info;
}
function c() {			// clear
    details.nodeValue = ' ';
}
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
})
// functions
function find_child(parent, name, attr) {
    var children = parent.childNodes;
    for (var i=0; i<children.length;i++) {
        if (children[i].tagName == name)
            return (attr != undefined) ? children[i].attributes[attr].value : children[i];
    }
    return;
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_"+attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_"+attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_"+attr].value;
    e.removeAttribute("_orig_"+attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes["width"].value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;
    // Smaller than this size won't fit anything
    if (w < 2*fontsize*fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x=txt.length-2; x>0; x--) {
        if (t.getSubStringLength(0, x+2) <= w) {
            t.textContent = txt.substring(0,x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes["x"] != undefined) {
            orig_save(e, "x");
            e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
        }
        if (e.attributes["width"] != undefined) {
            orig_save(e, "width");
            e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_child(c[i], x-xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes["x"] != undefined) {
            orig_save(e, "x");
            e.attributes["x"].value = xpad;
        }
        if (e.attributes["width"] != undefined) {
            orig_save(e, "width");
            e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr["width"].value);
    var xmin = parseFloat(attr["x"].value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr["y"].value);
    var ratio = (svg.width.baseVal.value - 2*xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    var unzoombtn = document.getElementById("unzoom");
    unzoombtn.style["opacity"] = "1.0";
    var el = document.getElementsByTagName("g");
    for(var i=0;i<el.length;i++){
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a["x"].value);
        var ew = parseFloat(a["width"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a["y"].value) > ymin;
        } else {
            var upstack = parseFloat(a["y"].value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.style["opacity"] = "0.5";
                zoom_parent(e);
                e.onclick = function(e){unzoom(); zoom(this);};
                update_text(e);
            }
            // not in current path
            else
                e.style["display"] = "none";
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.style["display"] = "none";
            }
            else {
                zoom_child(e, xmin, ratio);
                e.onclick = function(e){zoom(this);};
                update_text(e);
            }
        }
    }
}
function unzoom() {
    var unzoombtn = document.getElementById("unzoom");
    unzoombtn.style["opacity"] = "0.0";
    var el = document.getElementsByTagName("g");
    for(i=0;i<el.length;i++) {
        el[i].style["display"] = "block";
        el[i].style["opacity"] = "1";
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.getElementsByTagName("rect");
    for (var i=0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.style["opacity"] = "0.1";
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.style["opacity"] = "0.0";
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementsByTagName("g");
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        if (e.attributes["class"].value != "func_g")
            continue;
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (rect == null) {
            // the rect might be wrapped in an anchor
            // if nameattr href is being used
            if (rect = find_child(e, "a")) {
                rect = find_child(r, "rect");
            }
        }
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes["width"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes["x"].value);
            orig_save(rect, "fill");
            rect.attributes["fill"].value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.style["opacity"] = "1.0";
    searchbtn.firstChild.nodeValue = "Reset Search"
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.style["opacity"] = "1.0";
    pct = 100 * count / maxwidth;
    if (pct == 100)
        pct = "100"
    else
        pct = pct.toFixed(1)
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function searchover(e) {
    searchbtn.style["opacity"] = "1.0";
}
function searchout(e) {
    if (searching) {
        searchbtn.style["opacity"] = "1.0";
    } else {
        searchbtn.style["opacity"] = "0.1";
    }
}
]]></script><rect x="0" y="0" width="1200" height="438" fill="url(#background)"/><text text-anchor="middle" x="600.00" y="24.00" font-size="17" font-family="Verdana" fill="rgb(0, 0, 0)">Flame Graph</text><text id="details" text-anchor="left" x="10.00" y="421.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"> </text><text id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" text-anchor="left" x="10.00" y="24.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">Reset Zoom</text><text id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" text-anchor="left" x="1090.00" y="24.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">Search</text><text id="matched" text-anchor="left" x="1090.00" y="421.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"> </text><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;T as vitte_rs::sampler::Sampler&lt;T&gt;&gt;::sample (1 samples, 0.08%)</title><rect x="10" y="341" width="0" height="15" fill="rgb(223,173,48)"/><text text-anchor="left" x="13.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10" y="341" width="1" height="15" fill="rgb(236,189,49)"/><text text-anchor="left" x="13.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::Distribution&lt;f64&gt;&gt;::sample (1 samples, 0.08%)</title><rect x="11" y="341" width="1" height="15" fill="rgb(246,208,9)"/><text text-anchor="left" x="14.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>[unknown] (4 samples, 0.33%)</title><rect x="10" y="357" width="3" height="15" fill="rgb(251,6,53)"/><text text-anchor="left" x="13.00" y="367.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>alloc::slice::&lt;impl [T]&gt;::repeat (1 samples, 0.08%)</title><rect x="12" y="341" width="1" height="15" fill="rgb(235,161,29)"/><text text-anchor="left" x="15.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;rand_distr::exponential::Exp&lt;N&gt; as rand::distributions::Distribution&lt;N&gt;&gt;::sample (5 samples, 0.42%)</title><rect x="438" y="213" width="5" height="15" fill="rgb(219,163,46)"/><text text-anchor="left" x="441.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>c2_chacha::guts::refill_wide::dispatch_init::impl_avx2 (2 samples, 0.17%)</title><rect x="441" y="197" width="2" height="15" fill="rgb(242,59,48)"/><text text-anchor="left" x="444.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;rand::distributions::float::Open01 as rand::distributions::Distribution&lt;f64&gt;&gt;::sample (1 samples, 0.08%)</title><rect x="444" y="197" width="1" height="15" fill="rgb(218,81,31)"/><text text-anchor="left" x="447.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>c2_chacha::guts::refill_wide::dispatch_init::impl_avx2 (1 samples, 0.08%)</title><rect x="444" y="181" width="1" height="15" fill="rgb(229,93,31)"/><text text-anchor="left" x="447.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>c2_chacha::guts::refill_wide::dispatch_init::impl_avx2 (1 samples, 0.08%)</title><rect x="447" y="181" width="1" height="15" fill="rgb(214,12,0)"/><text text-anchor="left" x="450.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;rand_distr::gamma::Gamma&lt;N&gt; as rand::distributions::Distribution&lt;N&gt;&gt;::sample (6 samples, 0.50%)</title><rect x="443" y="213" width="6" height="15" fill="rgb(230,229,8)"/><text text-anchor="left" x="446.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;rand_distr::normal::StandardNormal as rand::distributions::Distribution&lt;f64&gt;&gt;::sample (4 samples, 0.33%)</title><rect x="445" y="197" width="4" height="15" fill="rgb(238,96,16)"/><text text-anchor="left" x="448.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>exp@@GLIBC_2.29 (1 samples, 0.08%)</title><rect x="448" y="181" width="1" height="15" fill="rgb(225,189,49)"/><text text-anchor="left" x="451.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__ieee754_exp_fma (1 samples, 0.08%)</title><rect x="448" y="165" width="1" height="15" fill="rgb(225,207,40)"/><text text-anchor="left" x="451.00" y="175.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__memmove_avx_unaligned_erms (63 samples, 5.24%)</title><rect x="449" y="213" width="62" height="15" fill="rgb(206,13,28)"/><text text-anchor="left" x="452.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">__memm..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__memmove_avx_unaligned_erms (3 samples, 0.25%)</title><rect x="512" y="197" width="3" height="15" fill="rgb(234,29,13)"/><text text-anchor="left" x="515.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>alloc::slice::&lt;impl [T]&gt;::repeat (5 samples, 0.42%)</title><rect x="511" y="213" width="5" height="15" fill="rgb(212,132,26)"/><text text-anchor="left" x="514.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="515" y="197" width="1" height="15" fill="rgb(223,138,4)"/><text text-anchor="left" x="518.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>@plt (1 samples, 0.08%)</title><rect x="516" y="197" width="1" height="15" fill="rgb(228,147,26)"/><text text-anchor="left" x="519.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>pow@@GLIBC_2.29 (4 samples, 0.33%)</title><rect x="516" y="213" width="4" height="15" fill="rgb(224,114,24)"/><text text-anchor="left" x="519.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__ieee754_pow_fma (3 samples, 0.25%)</title><rect x="517" y="197" width="3" height="15" fill="rgb(238,48,39)"/><text text-anchor="left" x="520.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;T as vitte_rs::sampler::Sampler&lt;T&gt;&gt;::sample (100 samples, 8.31%)</title><rect x="423" y="229" width="99" height="15" fill="rgb(232,109,47)"/><text text-anchor="left" x="426.00" y="239.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;T as vitte..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>rand::distributions::float::&lt;impl rand::distributions::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.17%)</title><rect x="520" y="213" width="2" height="15" fill="rgb(243,102,31)"/><text text-anchor="left" x="523.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::cast_from_int (2 samples, 0.17%)</title><rect x="520" y="197" width="2" height="15" fill="rgb(214,129,12)"/><text text-anchor="left" x="523.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (668 samples, 55.53%)</title><rect x="522" y="213" width="655" height="15" fill="rgb(219,192,45)"/><text text-anchor="left" x="525.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__munmap (1 samples, 0.08%)</title><rect x="1177" y="213" width="1" height="15" fill="rgb(214,166,24)"/><text text-anchor="left" x="1180.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (670 samples, 55.69%)</title><rect x="522" y="229" width="657" height="15" fill="rgb(237,34,40)"/><text text-anchor="left" x="525.00" y="239.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::ptr::drop_in_place (1 samples, 0.08%)</title><rect x="1178" y="213" width="1" height="15" fill="rgb(217,169,43)"/><text text-anchor="left" x="1181.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__munmap (1 samples, 0.08%)</title><rect x="1178" y="197" width="1" height="15" fill="rgb(206,128,41)"/><text text-anchor="left" x="1181.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1182" y="53" width="1" height="15" fill="rgb(217,38,48)"/><text text-anchor="left" x="1185.00" y="63.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__libc_start_main (1,194 samples, 99.25%)</title><rect x="17" y="341" width="1172" height="15" fill="rgb(227,3,44)"/><text text-anchor="left" x="20.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">__libc_start_main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>main (1,194 samples, 99.25%)</title><rect x="17" y="325" width="1172" height="15" fill="rgb(230,105,51)"/><text text-anchor="left" x="20.00" y="335.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::rt::lang_start_internal (1,194 samples, 99.25%)</title><rect x="17" y="309" width="1172" height="15" fill="rgb(219,128,3)"/><text text-anchor="left" x="20.00" y="319.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::rt::lang_start_internal</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__rust_maybe_catch_panic (1,194 samples, 99.25%)</title><rect x="17" y="293" width="1172" height="15" fill="rgb(246,188,6)"/><text text-anchor="left" x="20.00" y="303.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">__rust_maybe_catch_panic</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::panicking::try::do_call (1,194 samples, 99.25%)</title><rect x="17" y="277" width="1172" height="15" fill="rgb(223,75,13)"/><text text-anchor="left" x="20.00" y="287.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::panicking::try::do_call</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h46835178df4ffc72 (1,194 samples, 99.25%)</title><rect x="17" y="261" width="1172" height="15" fill="rgb(251,72,22)"/><text text-anchor="left" x="20.00" y="271.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h46835178df4ffc72</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>vec_sorted::main (1,194 samples, 99.25%)</title><rect x="17" y="245" width="1172" height="15" fill="rgb(249,3,2)"/><text text-anchor="left" x="20.00" y="255.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">vec_sorted::main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::io::stdio::_print (10 samples, 0.83%)</title><rect x="1179" y="229" width="10" height="15" fill="rgb(232,179,22)"/><text text-anchor="left" x="1182.00" y="239.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.83%)</title><rect x="1179" y="213" width="10" height="15" fill="rgb(233,226,52)"/><text text-anchor="left" x="1182.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::fmt::write (10 samples, 0.83%)</title><rect x="1179" y="197" width="10" height="15" fill="rgb(208,146,2)"/><text text-anchor="left" x="1182.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as core::fmt::Debug&gt;::fmt (10 samples, 0.83%)</title><rect x="1179" y="181" width="10" height="15" fill="rgb(247,135,51)"/><text text-anchor="left" x="1182.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::fmt::builders::DebugList::entry (10 samples, 0.83%)</title><rect x="1179" y="165" width="10" height="15" fill="rgb(231,7,31)"/><text text-anchor="left" x="1182.00" y="175.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::fmt::builders::DebugInner::entry (10 samples, 0.83%)</title><rect x="1179" y="149" width="10" height="15" fill="rgb(218,42,35)"/><text text-anchor="left" x="1182.00" y="159.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (9 samples, 0.75%)</title><rect x="1180" y="133" width="9" height="15" fill="rgb(227,101,42)"/><text text-anchor="left" x="1183.00" y="143.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.67%)</title><rect x="1181" y="117" width="8" height="15" fill="rgb(205,174,5)"/><text text-anchor="left" x="1184.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::io::Write::write_all (8 samples, 0.67%)</title><rect x="1181" y="101" width="8" height="15" fill="rgb(214,51,9)"/><text text-anchor="left" x="1184.00" y="111.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (8 samples, 0.67%)</title><rect x="1181" y="85" width="8" height="15" fill="rgb(234,193,18)"/><text text-anchor="left" x="1184.00" y="95.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (7 samples, 0.58%)</title><rect x="1182" y="69" width="7" height="15" fill="rgb(235,200,12)"/><text text-anchor="left" x="1185.00" y="79.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (6 samples, 0.50%)</title><rect x="1183" y="53" width="6" height="15" fill="rgb(251,12,42)"/><text text-anchor="left" x="1186.00" y="63.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__libc_write (6 samples, 0.50%)</title><rect x="1183" y="37" width="6" height="15" fill="rgb(217,27,4)"/><text text-anchor="left" x="1186.00" y="47.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>all (1,203 samples, 100%)</title><rect x="10" y="389" width="1180" height="15" fill="rgb(239,229,14)"/><text text-anchor="left" x="13.00" y="399.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>vec_sorted (1,203 samples, 100.00%)</title><rect x="10" y="373" width="1180" height="15" fill="rgb(245,101,27)"/><text text-anchor="left" x="13.00" y="383.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">vec_sorted</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_start (1,199 samples, 99.67%)</title><rect x="13" y="357" width="1177" height="15" fill="rgb(232,165,25)"/><text text-anchor="left" x="16.00" y="367.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">_start</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_dl_start (1 samples, 0.08%)</title><rect x="1189" y="341" width="1" height="15" fill="rgb(237,25,36)"/><text text-anchor="left" x="1192.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_dl_sysdep_start (1 samples, 0.08%)</title><rect x="1189" y="325" width="1" height="15" fill="rgb(229,21,37)"/><text text-anchor="left" x="1192.00" y="335.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__GI___tunables_init (1 samples, 0.08%)</title><rect x="1189" y="309" width="1" height="15" fill="rgb(252,193,34)"/><text text-anchor="left" x="1192.00" y="319.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g></svg>